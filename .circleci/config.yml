# Use 2.1 for orbs
version: 2.1

# -------------------------------------------------------------------------------------
# Environments to run the jobs in
# -------------------------------------------------------------------------------------
gpu: &gpu
  machine:
    image: linux-cuda-11:2023.02.1
  resource_class: gpu.nvidia.medium.multi

version_parameters: &version_parameters
  parameters:
    pytorch_version:
      type: string
    torchvision_version:
      type: string
    pytorch_index:
      type: string
      # use test wheels index to have access to RC wheels
      # https://download.pytorch.org/whl/test/torch_test.html
      default: "https://download.pytorch.org/whl/torch_stable.html"
    python_version: # NOTE: only affects linux
      type: string
      default: '3.10.6'
    cuda_version:
      type: string
      default: '11.6'

  environment:
    PYTORCH_VERSION: << parameters.pytorch_version >>
    TORCHVISION_VERSION: << parameters.torchvision_version >>
    PYTORCH_INDEX: << parameters.pytorch_index >>
    PYTHON_VERSION: << parameters.python_version>>
    CUDA_VERSION: << parameters.cuda_version >>

# -------------------------------------------------------------------------------------
# Re-usable commands
# -------------------------------------------------------------------------------------
cache_key: &cache_key cache-key-{{ .Environment.CIRCLE_JOB }}-{{ checksum ".circleci/config.yml" }}-{{ checksum "setup.py"}}

install_linux_dep: &install_linux_dep
  - run:
      name: Install Dependencies
      command: |
        if [[ "$PYTORCH_VERSION" == "master" ]]; then
                  echo "Installing torch/torchvision from $PYTORCH_INDEX"
                  # Remove first, in case it's in the CI cache
                  pip uninstall -y torch torchvision
                  pip install -v --progress-bar off --pre torch torchvision --extra-index-url $PYTORCH_INDEX
        else
          echo "Installing torch==$PYTORCH_VERSION and torchvision==$TORCHVISION_VERSION from $PYTORCH_INDEX"
          pip install -v --progress-bar off torch==$PYTORCH_VERSION torchvision==$TORCHVISION_VERSION -f $PYTORCH_INDEX
        fi

install_repo: &install_repo
  - run:
      name: Install Repository
      command: |
        source activate fairseq
        python -m pip install fairscale
        python -m pip install -e '.[dev,docs]'
        python -c 'import torch; print("Torch version:", torch.__version__)'

run_unittests: &run_unittests
  - run:
      name: Run Unit Tests
      command: |
        source activate fairseq
        pytest tests/gpu/test_binaries_gpu.py

check_nvidia_driver: &check_nvidia_driver
  - run:
      name: Check NVIDIA Driver
      working_directory: ~/
      command: |
        pyenv versions
        nvidia-smi

create_conda_env: &create_conda_env
  - run:
      name: Install and Create Conda Environment
      command: |
        curl -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        chmod +x ~/miniconda.sh
        bash ~/miniconda.sh -b -p $HOME/miniconda
        rm ~/miniconda.sh
        echo 'export PATH=$HOME/miniconda/bin:$PATH' >> $BASH_ENV
        source $BASH_ENV
        if [ ! -d ~/miniconda/envs/fairseq ]
        then
          conda create -y -n fairseq python=<< parameters.python_version >>
        fi
        source activate fairseq
        python --version
        pip install --upgrade pip

select_cuda: &select_cuda
  - run:
      name: Select CUDA
      command: |
        sudo update-alternatives --set cuda /usr/local/cuda-<< parameters.cuda_version >>
# -------------------------------------------------------------------------------------
# Jobs to run
# -------------------------------------------------------------------------------------

jobs:
  linux_gpu_tests:
    <<: *gpu
    <<: *version_parameters

    working_directory: ~/fairseq-py

    steps:
      - checkout
      - <<: *select_cuda
      - <<: *check_nvidia_driver
      - <<: *create_conda_env
      - restore_cache:
          key: *cache_key
      - <<: *install_linux_dep
      - save_cache:
          paths:
            - ~/miniconda/
          key: *cache_key
      - <<: *install_repo
      - <<: *run_unittests
      - save_cache:
          paths:
            - /opt/circleci/.pyenv
            - ~/.torch
          key: cache-{{ arch }}-<< parameters.pytorch_version >>-{{ .Branch }}-20230227

workflows:
  version: 2
  build:
    jobs:
      - linux_gpu_tests:
          name: linux_gpu_tests_pytorch1.12
          pytorch_version: '1.12.1+cu116'
          torchvision_version: '0.13.1+cu116'
          cuda_version: '11.6'
      - linux_gpu_tests:
          name: linux_gpu_tests_pytorch1.13
          pytorch_version: '1.13.1+cu116'
          torchvision_version: '0.14.1+cu116'
          cuda_version: '11.6'
